# Generated by Django 5.0.1 on 2025-09-12 00:02

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0007_userprofile_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChallengeBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('completion', '🏆 Completion Badge'), ('streak', '🔥 Streak Badge'), ('participation', '⭐ Participation Badge'), ('leadership', '👑 Leadership Badge'), ('support', '🤝 Support Badge')], max_length=20)),
                ('icon', models.CharField(default='🏆', help_text='Emoji icon for the badge', max_length=10)),
                ('challenge_type', models.CharField(blank=True, choices=[('sobriety', '🎯 Sobriety Challenge'), ('wellness', '💪 Wellness Challenge'), ('mindfulness', '🧘 Mindfulness Challenge'), ('community', '🤝 Community Engagement'), ('self_care', '🌿 Self-Care Challenge'), ('gratitude', '🙏 Gratitude Challenge'), ('exercise', '🏃 Exercise Challenge'), ('learning', '📚 Learning Challenge'), ('service', '🤲 Service Challenge'), ('creativity', '🎨 Creative Challenge')], help_text='Leave blank for universal badges', max_length=20, null=True)),
                ('required_completions', models.IntegerField(default=1)),
                ('required_streak_days', models.IntegerField(default=0)),
                ('rarity_level', models.IntegerField(default=1, help_text='1=Common, 2=Uncommon, 3=Rare, 4=Epic, 5=Legendary')),
                ('points_value', models.IntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChallengeCheckIn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('completed_daily_goal', models.BooleanField(default=False)),
                ('mood', models.CharField(choices=[('great', '😄 Great'), ('good', '😊 Good'), ('okay', '😐 Okay'), ('struggling', '😔 Struggling'), ('difficult', '😞 Difficult')], default='okay', max_length=20)),
                ('progress_note', models.TextField(blank=True, help_text='How did today go? Any challenges or wins?')),
                ('custom_metric_1', models.FloatField(blank=True, help_text='Exercise minutes, meditation time, etc.', null=True)),
                ('custom_metric_2', models.FloatField(blank=True, help_text='Additional metric tracking', null=True)),
                ('is_shared_with_group', models.BooleanField(default=False, help_text='Share this check-in with the group')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('encouragement_received', models.ManyToManyField(blank=True, related_name='given_encouragements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=500)),
                ('is_encouragement', models.BooleanField(default=True, help_text='Is this an encouragement/support comment?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('check_in', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='accounts.challengecheckin')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', '🔥 Active'), ('completed', '✅ Completed'), ('dropped', '😞 Dropped Out'), ('paused', '⏸️ Paused')], default='active', max_length=20)),
                ('joined_date', models.DateTimeField(auto_now_add=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('days_completed', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('personal_goal', models.TextField(blank=True, help_text='Personal goal for this challenge')),
                ('motivation_note', models.TextField(blank=True, help_text="Why you're taking this challenge")),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accountability_partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='buddy_partnerships', to='accounts.challengeparticipant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-days_completed', '-current_streak'],
            },
        ),
        migrations.AddField(
            model_name='challengecheckin',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_ins', to='accounts.challengeparticipant'),
        ),
        migrations.CreateModel(
            name='GroupChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('sobriety', '🎯 Sobriety Challenge'), ('wellness', '💪 Wellness Challenge'), ('mindfulness', '🧘 Mindfulness Challenge'), ('community', '🤝 Community Engagement'), ('self_care', '🌿 Self-Care Challenge'), ('gratitude', '🙏 Gratitude Challenge'), ('exercise', '🏃 Exercise Challenge'), ('learning', '📚 Learning Challenge'), ('service', '🤲 Service Challenge'), ('creativity', '🎨 Creative Challenge')], max_length=20)),
                ('duration_days', models.IntegerField(choices=[(7, '7 Days'), (14, '14 Days'), (21, '21 Days'), (30, '30 Days'), (60, '60 Days'), (90, '90 Days')])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('daily_goal_description', models.TextField(help_text='What participants need to do each day')),
                ('rules_and_guidelines', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', '📝 Draft'), ('upcoming', '⏳ Upcoming'), ('active', '🔥 Active'), ('completed', '✅ Completed'), ('cancelled', '❌ Cancelled')], default='draft', max_length=20)),
                ('is_public', models.BooleanField(default=True, help_text='Allow non-group members to see and join')),
                ('max_participants', models.IntegerField(blank=True, help_text='Leave blank for unlimited', null=True)),
                ('allow_buddy_system', models.BooleanField(default=True, help_text='Allow participants to pair up for accountability')),
                ('enable_leaderboard', models.BooleanField(default=True, help_text='Show participant progress rankings')),
                ('enable_daily_check_in', models.BooleanField(default=True, help_text='Require daily check-ins')),
                ('completion_badge_name', models.CharField(blank=True, help_text='Custom badge name for completing this challenge', max_length=100)),
                ('completion_message', models.TextField(blank=True, help_text='Message shown when someone completes the challenge')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='accounts.recoverygroup')),
            ],
            options={
                'ordering': ['-start_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='challengeparticipant',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='accounts.groupchallenge'),
        ),
        migrations.CreateModel(
            name='UserChallengeBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_date', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.challengebadge')),
                ('challenge', models.ForeignKey(blank=True, help_text='Specific challenge this was earned in', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.groupchallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_date'],
            },
        ),
        migrations.AddIndex(
            model_name='challengecheckin',
            index=models.Index(fields=['participant', 'date'], name='accounts_ch_partici_e5259a_idx'),
        ),
        migrations.AddIndex(
            model_name='challengecheckin',
            index=models.Index(fields=['date', 'is_shared_with_group'], name='accounts_ch_date_ad9c81_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='challengecheckin',
            unique_together={('participant', 'date')},
        ),
        migrations.AddIndex(
            model_name='groupchallenge',
            index=models.Index(fields=['group', 'status'], name='accounts_gr_group_i_89e10c_idx'),
        ),
        migrations.AddIndex(
            model_name='groupchallenge',
            index=models.Index(fields=['start_date', 'end_date'], name='accounts_gr_start_d_8890e3_idx'),
        ),
        migrations.AddIndex(
            model_name='groupchallenge',
            index=models.Index(fields=['challenge_type', 'status'], name='accounts_gr_challen_17b835_idx'),
        ),
        migrations.AddIndex(
            model_name='challengeparticipant',
            index=models.Index(fields=['challenge', 'status'], name='accounts_ch_challen_3fca55_idx'),
        ),
        migrations.AddIndex(
            model_name='challengeparticipant',
            index=models.Index(fields=['user', 'status'], name='accounts_ch_user_id_6d5191_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='challengeparticipant',
            unique_together={('challenge', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='userchallengebadge',
            unique_together={('user', 'badge', 'challenge')},
        ),
    ]
