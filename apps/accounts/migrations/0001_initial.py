# Generated by Django 5.0.1 on 2025-09-16 23:00

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChallengeBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('completion', 'üèÜ Completion Badge'), ('streak', 'üî• Streak Badge'), ('participation', '‚≠ê Participation Badge'), ('leadership', 'üëë Leadership Badge'), ('support', 'ü§ù Support Badge')], max_length=20)),
                ('icon', models.CharField(default='üèÜ', help_text='Emoji icon for the badge', max_length=10)),
                ('challenge_type', models.CharField(blank=True, choices=[('sobriety', 'üéØ Sobriety Challenge'), ('wellness', 'üí™ Wellness Challenge'), ('mindfulness', 'üßò Mindfulness Challenge'), ('community', 'ü§ù Community Engagement'), ('self_care', 'üåø Self-Care Challenge'), ('gratitude', 'üôè Gratitude Challenge'), ('exercise', 'üèÉ Exercise Challenge'), ('learning', 'üìö Learning Challenge'), ('service', 'ü§≤ Service Challenge'), ('creativity', 'üé® Creative Challenge')], help_text='Leave blank for universal badges', max_length=20, null=True)),
                ('required_completions', models.IntegerField(default=1)),
                ('required_streak_days', models.IntegerField(default=0)),
                ('rarity_level', models.IntegerField(default=1, help_text='1=Common, 2=Uncommon, 3=Rare, 4=Epic, 5=Legendary')),
                ('points_value', models.IntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('sobriety_date', models.DateField(blank=True, help_text='Your sobriety start date', null=True)),
                ('recovery_goals', models.TextField(blank=True, help_text='Your personal recovery goals')),
                ('is_sponsor', models.BooleanField(default=False, help_text='Are you available as a sponsor?')),
                ('bio', models.TextField(blank=True, help_text='Tell us about yourself')),
                ('location', models.CharField(blank=True, max_length=100)),
                ('is_profile_public', models.BooleanField(default=False, help_text='Make your profile visible to other members')),
                ('show_sobriety_date', models.BooleanField(default=True, help_text='Display your sobriety date on your profile')),
                ('allow_messages', models.BooleanField(default=True, help_text='Allow other members to message you')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('email_notifications', models.BooleanField(default=True)),
                ('newsletter_subscriber', models.BooleanField(default=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivityFeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('milestone_created', 'Milestone Created'), ('blog_post_published', 'Blog Post Published'), ('comment_posted', 'Comment Posted'), ('journal_entry_shared', 'Journal Entry Shared'), ('user_joined', 'User Joined'), ('profile_updated', 'Profile Updated'), ('achievement_unlocked', 'Achievement Unlocked'), ('support_message_sent', 'Support Message Sent'), ('resource_bookmarked', 'Resource Bookmarked'), ('check_in_posted', 'Check-in Posted')], max_length=30)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=True)),
                ('extra_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_activities', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity Feed Item',
                'verbose_name_plural': 'Activity Feed Items',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ActivityComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='accounts.activityfeed')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeCheckIn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('completed_daily_goal', models.BooleanField(default=False)),
                ('mood', models.CharField(choices=[('great', 'üòÑ Great'), ('good', 'üòä Good'), ('okay', 'üòê Okay'), ('struggling', 'üòî Struggling'), ('difficult', 'üòû Difficult')], default='okay', max_length=20)),
                ('progress_note', models.TextField(blank=True, help_text='How did today go? Any challenges or wins?')),
                ('custom_metric_1', models.FloatField(blank=True, help_text='Exercise minutes, meditation time, etc.', null=True)),
                ('custom_metric_2', models.FloatField(blank=True, help_text='Additional metric tracking', null=True)),
                ('is_shared_with_group', models.BooleanField(default=False, help_text='Share this check-in with the group')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('encouragement_received', models.ManyToManyField(blank=True, related_name='given_encouragements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(max_length=500)),
                ('is_encouragement', models.BooleanField(default=True, help_text='Is this an encouragement/support comment?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('check_in', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='accounts.challengecheckin')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'üî• Active'), ('completed', '‚úÖ Completed'), ('dropped', 'üòû Dropped Out'), ('paused', '‚è∏Ô∏è Paused')], default='active', max_length=20)),
                ('joined_date', models.DateTimeField(auto_now_add=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('days_completed', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('longest_streak', models.IntegerField(default=0)),
                ('personal_goal', models.TextField(blank=True, help_text='Personal goal for this challenge')),
                ('motivation_note', models.TextField(blank=True, help_text="Why you're taking this challenge")),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accountability_partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pal_partnerships', to='accounts.challengeparticipant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-days_completed', '-current_streak'],
            },
        ),
        migrations.AddField(
            model_name='challengecheckin',
            name='participant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='check_ins', to='accounts.challengeparticipant'),
        ),
        migrations.CreateModel(
            name='DailyCheckIn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('mood', models.IntegerField(choices=[(1, 'üò∞ Struggling'), (2, 'üòî Down'), (3, 'üòê Okay'), (4, 'üòä Good'), (5, 'üòÑ Great'), (6, 'üåü Amazing')])),
                ('craving_level', models.IntegerField(choices=[(0, 'None'), (1, 'Mild'), (2, 'Moderate'), (3, 'Strong'), (4, 'Intense')], default=0)),
                ('energy_level', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('gratitude', models.TextField(blank=True, help_text='What are you grateful for today?')),
                ('challenge', models.TextField(blank=True, help_text="What's your biggest challenge today?")),
                ('goal', models.TextField(blank=True, help_text="What's your goal for today?")),
                ('is_shared', models.BooleanField(default=False, help_text='Share with community')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_checkins', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_checkins', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='GroupChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('challenge_type', models.CharField(choices=[('sobriety', 'üéØ Sobriety Challenge'), ('wellness', 'üí™ Wellness Challenge'), ('mindfulness', 'üßò Mindfulness Challenge'), ('community', 'ü§ù Community Engagement'), ('self_care', 'üåø Self-Care Challenge'), ('gratitude', 'üôè Gratitude Challenge'), ('exercise', 'üèÉ Exercise Challenge'), ('learning', 'üìö Learning Challenge'), ('service', 'ü§≤ Service Challenge'), ('creativity', 'üé® Creative Challenge')], max_length=20)),
                ('duration_days', models.IntegerField(choices=[(7, '7 Days'), (14, '14 Days'), (21, '21 Days'), (30, '30 Days'), (60, '60 Days'), (90, '90 Days')])),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('daily_goal_description', models.TextField(help_text='What participants need to do each day')),
                ('rules_and_guidelines', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'üìù Draft'), ('upcoming', '‚è≥ Upcoming'), ('active', 'üî• Active'), ('completed', '‚úÖ Completed'), ('cancelled', '‚ùå Cancelled')], default='draft', max_length=20)),
                ('is_public', models.BooleanField(default=True, help_text='Allow non-group members to see and join')),
                ('max_participants', models.IntegerField(blank=True, help_text='Leave blank for unlimited', null=True)),
                ('allow_pal_system', models.BooleanField(default=True, help_text='Allow participants to pair up for accountability')),
                ('enable_leaderboard', models.BooleanField(default=True, help_text='Show participant progress rankings')),
                ('enable_daily_check_in', models.BooleanField(default=True, help_text='Require daily check-ins')),
                ('completion_badge_name', models.CharField(blank=True, help_text='Custom badge name for completing this challenge', max_length=100)),
                ('completion_message', models.TextField(blank=True, help_text='Message shown when someone completes the challenge')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='challengeparticipant',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='accounts.groupchallenge'),
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('date_achieved', models.DateField(default=django.utils.timezone.now)),
                ('days_sober', models.IntegerField(blank=True, null=True)),
                ('milestone_type', models.CharField(choices=[('days', 'Days Sober'), ('personal', 'Personal Achievement'), ('health', 'Health Milestone'), ('relationship', 'Relationship Milestone'), ('career', 'Career Achievement'), ('other', 'Other')], default='days', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_achieved'],
            },
        ),
        migrations.CreateModel(
            name='RecoveryGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('group_type', models.CharField(choices=[('addiction_type', 'By Addiction Type'), ('location', 'Location-based'), ('recovery_stage', 'Recovery Stage'), ('interest', 'Shared Interest'), ('age_group', 'Age Group'), ('gender', 'Gender-specific'), ('family', 'Family/Supporters'), ('professional', 'Professional Support')], max_length=20)),
                ('privacy_level', models.CharField(choices=[('public', 'Public - Anyone can join'), ('private', 'Private - Approval required'), ('secret', 'Secret - Invitation only')], default='public', max_length=10)),
                ('max_members', models.PositiveIntegerField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=100)),
                ('meeting_schedule', models.CharField(blank=True, max_length=200)),
                ('group_image', models.ImageField(blank=True, upload_to='groups/')),
                ('group_color', models.CharField(default='#52b788', max_length=7)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
                ('moderators', models.ManyToManyField(blank=True, related_name='moderated_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GroupPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(choices=[('discussion', 'Discussion'), ('milestone', 'Milestone Share'), ('resource', 'Resource Share'), ('question', 'Question'), ('support', 'Support Request'), ('event', 'Event/Meeting')], default='discussion', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_anonymous', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_posts', to=settings.AUTH_USER_MODEL)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_group_posts', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='accounts.recoverygroup')),
            ],
            options={
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('active', 'Active Member'), ('moderator', 'Moderator'), ('admin', 'Administrator'), ('banned', 'Banned'), ('left', 'Left Group')], default='pending', max_length=20)),
                ('joined_date', models.DateField(blank=True, null=True)),
                ('left_date', models.DateField(blank=True, null=True)),
                ('role_notes', models.TextField(blank=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='accounts.recoverygroup')),
            ],
        ),
        migrations.AddField(
            model_name='groupchallenge',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='accounts.recoverygroup'),
        ),
        migrations.CreateModel(
            name='RecoveryPal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('paused', 'Paused'), ('ended', 'Ended')], default='pending', max_length=20)),
                ('started_date', models.DateField(blank=True, null=True)),
                ('ended_date', models.DateField(blank=True, null=True)),
                ('check_in_frequency', models.CharField(blank=True, help_text='How often you want to check in with each other', max_length=50)),
                ('shared_goals', models.TextField(blank=True, help_text='Shared recovery goals and commitments')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pal_relationships_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pal_relationships_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SponsorRelationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('active', 'Active'), ('completed', 'Completed'), ('declined', 'Declined'), ('terminated', 'Terminated')], default='pending', max_length=20)),
                ('started_date', models.DateField(blank=True, null=True)),
                ('ended_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Private notes about the relationship')),
                ('meeting_frequency', models.CharField(blank=True, help_text='e.g., Weekly, Bi-weekly, As needed', max_length=50)),
                ('communication_method', models.CharField(blank=True, help_text='e.g., Phone calls, In-person, Video chat', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sponsee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsor_relationships', to=settings.AUTH_USER_MODEL)),
                ('sponsor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sponsee_relationships', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SupportMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserChallengeBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_date', models.DateTimeField(auto_now_add=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.challengebadge')),
                ('challenge', models.ForeignKey(blank=True, help_text='Specific challenge this was earned in', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.groupchallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-earned_date'],
            },
        ),
        migrations.CreateModel(
            name='UserConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_type', models.CharField(choices=[('follow', 'Following'), ('block', 'Blocked'), ('friend', 'Friend')], default='follow', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_mutual', models.BooleanField(default=False)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_connections', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_connections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, upload_to='profiles/')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('emergency_phone', models.CharField(blank=True, max_length=20)),
                ('is_public', models.BooleanField(default=False)),
                ('show_sobriety_date', models.BooleanField(default=False)),
                ('allow_messages', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='challengecheckin',
            index=models.Index(fields=['participant', 'date'], name='accounts_ch_partici_e5259a_idx'),
        ),
        migrations.AddIndex(
            model_name='challengecheckin',
            index=models.Index(fields=['date', 'is_shared_with_group'], name='accounts_ch_date_ad9c81_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='challengecheckin',
            unique_together={('participant', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='dailycheckin',
            unique_together={('user', 'date')},
        ),
        migrations.AddIndex(
            model_name='challengeparticipant',
            index=models.Index(fields=['challenge', 'status'], name='accounts_ch_challen_3fca55_idx'),
        ),
        migrations.AddIndex(
            model_name='challengeparticipant',
            index=models.Index(fields=['user', 'status'], name='accounts_ch_user_id_6d5191_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='challengeparticipant',
            unique_together={('challenge', 'user')},
        ),
        migrations.AddIndex(
            model_name='recoverygroup',
            index=models.Index(fields=['group_type', 'privacy_level'], name='accounts_re_group_t_b4d078_idx'),
        ),
        migrations.AddIndex(
            model_name='recoverygroup',
            index=models.Index(fields=['is_active', 'created_at'], name='accounts_re_is_acti_527c90_idx'),
        ),
        migrations.AddIndex(
            model_name='grouppost',
            index=models.Index(fields=['group', 'post_type'], name='accounts_gr_group_i_418380_idx'),
        ),
        migrations.AddIndex(
            model_name='grouppost',
            index=models.Index(fields=['author', 'created_at'], name='accounts_gr_author__4d2d24_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['user', 'status'], name='accounts_gr_user_id_9047d7_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['group', 'status'], name='accounts_gr_group_i_5ca2bd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('user', 'group')},
        ),
        migrations.AddIndex(
            model_name='groupchallenge',
            index=models.Index(fields=['group', 'status'], name='accounts_gr_group_i_89e10c_idx'),
        ),
        migrations.AddIndex(
            model_name='groupchallenge',
            index=models.Index(fields=['start_date', 'end_date'], name='accounts_gr_start_d_8890e3_idx'),
        ),
        migrations.AddIndex(
            model_name='groupchallenge',
            index=models.Index(fields=['challenge_type', 'status'], name='accounts_gr_challen_17b835_idx'),
        ),
        migrations.AddIndex(
            model_name='recoverypal',
            index=models.Index(fields=['user1', 'status'], name='accounts_re_user1_i_e88f31_idx'),
        ),
        migrations.AddIndex(
            model_name='recoverypal',
            index=models.Index(fields=['user2', 'status'], name='accounts_re_user2_i_347cc2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='recoverypal',
            unique_together={('user1', 'user2')},
        ),
        migrations.AddIndex(
            model_name='sponsorrelationship',
            index=models.Index(fields=['sponsor', 'status'], name='accounts_sp_sponsor_92e57f_idx'),
        ),
        migrations.AddIndex(
            model_name='sponsorrelationship',
            index=models.Index(fields=['sponsee', 'status'], name='accounts_sp_sponsee_e23a73_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sponsorrelationship',
            unique_together={('sponsor', 'sponsee')},
        ),
        migrations.AlterUniqueTogether(
            name='userchallengebadge',
            unique_together={('user', 'badge', 'challenge')},
        ),
        migrations.AddIndex(
            model_name='userconnection',
            index=models.Index(fields=['follower', 'connection_type'], name='accounts_us_followe_89cfc9_idx'),
        ),
        migrations.AddIndex(
            model_name='userconnection',
            index=models.Index(fields=['following', 'connection_type'], name='accounts_us_followi_39070f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userconnection',
            unique_together={('follower', 'following', 'connection_type')},
        ),
    ]
